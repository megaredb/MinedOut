using MinedOut.Core.Logic.Entities;
using MinedOut.Core.Logic.World.Cells;

namespace MinedOut.Core.Logic.World;

public class GameWorld
{
    public bool IsAutoGenerated = true;

    public GameWorld(int width, int height)
    {
        ResetAndResize(width, height);
    }

    public GameWorld(int width, int height, string name, Cell[,] grid, List<Entity> entities) : this(width, height)
    {
        Name = name;
        Grid = grid;
        Entities = entities;
    }

    public string Name { get; set; } = "World";

    public int Height { get; private set; }
    public int Width { get; private set; }
    private Cell[,] Grid { get; set; } = null!;

    public List<Entity> Entities { get; } = new();

    public Cell this[int x, int y]
    {
        get => Grid[x, y];
        set => Grid[x, y] = value;
    }

    public void CopyDataFrom(GameWorld world)
    {
        ResetAndResize(world.Width, world.Height);
        Name = world.Name;
        Grid = world.Grid;

        foreach (var entity in Entities) entity.Drop();

        Entities.Clear();

        foreach (var entity in world.Entities) AddEntity(entity);
    }

    public event Action<Entity> EntityAdded = delegate { };

    public void Reset()
    {
        Grid = new Cell[Width, Height];

        for (var x = 0; x < Width; x++)
        for (var y = 0; y < Height; y++)
            Grid[x, y] = x == 0 || x == Width - 1 || y == 0 || y == Height - 1
                ? CellsRegistry.Wall
                : CellsRegistry.Air;
    }

    public void AddEntity(Entity entity)
    {
        Entities.Add(entity);
        EntityAdded(entity);
    }

    public void ResetAndResize(int width, int height)
    {
        Width = width;
        Height = height;

        Reset();
    }
}